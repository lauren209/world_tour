{"version":3,"sources":["CountryCard.jsx","CountryList.jsx","CountryApp.jsx","serviceWorker.js","index.js"],"names":["CountryCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","countryData","countryCode","name","react_default","a","createElement","className","src","flag","alt","population","area","languages","map","lang","key","_this2","fetch","then","r","json","data","setState","Component","CountryList","region","console","log","countryCodeArray","newRegion","id","what","src_CountryCard_0","alpha3Code","e","CountryApp","regions","selectedRegion","target","value","onChange","getRegion","z","src_CountryList","React","Boolean","window","location","hostname","match","ReactDOM","render","src_CountryApp_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15b73014.chunk.js","sourcesContent":["\nimport React, {Component} from 'react';\nimport \"./CountryCard.css\";\n\n\nclass CountryCard extends Component{\n    // props capture what is given inside the attr tag\n    constructor(props) {\n        super(props);\n        //for things that will effect the UI inside state\n        // immutable\n        this.state = {\n            countryData: null,\n            countryCode: 'new code',\n            name: 'name'\n        }\n    }\n    \n\n    render() {\n        if (this.state.countryData !== null) {\n            // console.log(this.state.countryData.languages);\n            return (\n                \n                <div className=\"countryDetails\">\n                    <h2>Name: {this.state.countryData.name}</h2>\n                    <span>Code: {this.props.countryCode}</span>\n                    <span>Flag <img src= {this.state.countryData.flag} alt=\"\"/></span>\n                    <span>Population: {this.state.countryData.population}</span>\n                    <span>Area: {this.state.countryData.area}</span>\n                    <span>Languages: \n                        <ul>\n                            \n                        {this.state.countryData.languages.map ( lang =>\n                            <li key={lang.name}>{lang.name}</li>\n                        )}\n                        </ul>\n                    </span>\n                    \n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <p>No country data</p>\n                </div>\n            );\n        }\n\n\n    }\n\n\n    componentDidMount() {\n        fetch(\"https://restcountries.eu/rest/v2/alpha/\" + this.props.countryCode)\n        .then(r => r.json())\n        .then(data => {\n            this.setState({countryData: data})\n        });\n        // this.getCountriesByRegion();\n    }\n}\n\n\nexport default CountryCard;","import React, {Component} from 'react';\nimport CountryCard from './CountryCard.jsx';\n\n\nclass CountryList extends Component{\n\n\n    constructor(region){\n        super(region);\n        console.log(region);\n        this.state = {\n            countryCodeArray: [],\n            newRegion: region\n            \n        }\n        console.log(this.state.newRegion);\n\n    }\n\n    render(){\n        return(\n            <div id=\"countriesInRegion\">\n                { this.state.countryCodeArray.map ( what => \n                    (<CountryCard  key={what.alpha3Code} countryCode={what.alpha3Code} />)\n                    \n                ) }\n            </div>\n        );\n    }\n\n\n    componentWillReceiveProps(e){\n        fetch(\"https://restcountries.eu/rest/v2/region/\" + e.region + \"?fields=alpha3Code\")\n        .then(r => r.json())\n        .then(data => {\n            this.setState({countryCodeArray: data})\n        });\n        \n    }\n\n    \n}\n\n\nexport default CountryList;","import React from 'react';\n// import logo from './logo.svg';\nimport './CountryApp.css';\n// import CountryCard from './CountryCard.jsx';\nimport CountryList from './CountryList.jsx';\n\n\n\nclass CountryApp extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            regions: [\"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"],\n            selectedRegion: \"asia\"\n        }\n    };\n\n    getRegion(e){\n        console.log(e.target.value);\n        this.setState({selectedRegion: e.target.value})\n    }\n\n\n\n    render (){\n\n\n        return (\n    \n            <div className=\"CountryApp\">\n                <p>\n                    Country app home page\n                </p>\n                \n                \n                <select id=\"regionlist\" onChange={(e) => {this.getRegion(e)} }>\n\n                    {this.state.regions.map(z => (\n                        <option key={z} value={z}>{z}</option>\n                    ))}\n        \n                </select>\n                \n\n                <div>\n                    {/* <CountryCard  key=\"usa\" countryCode=\"usa\" /> */}\n                    {/* <CountryCard key=\"can\" countryCode=\"can\" /> */}\n                    <CountryList region= {this.state.selectedRegion} />\n                </div>\n            </div>\n\n        )\n    }\n    \n}\n\n\n\n\n\nexport default CountryApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CountryApp from './CountryApp.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<CountryApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}